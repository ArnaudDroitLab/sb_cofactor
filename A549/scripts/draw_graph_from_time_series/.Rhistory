setwd("/home/chris/Bureau/sb_cofactor_hr/A549/scripts/draw_graph_from_time_series/")
# setwd("/home/chris/Bureau/sb_cofactor_hr/A549/scripts/draw_graph_from_time_series/")
raw_counts <- read.csv("raw_counts.csv", sep=",", header=TRUE, row.names=1)
nb_genes <- dim(raw_counts)[1]
nb_sample <- dim(raw_counts)[2]
# 60483 genes
# 46 samples (correspondant a differents temps)
total_expression <- rowSums(raw_counts)
no_expression <- sum(total_expression == 0)
# 22569 genes ne s'exprimant pas pendant les 12 heures dans aucun des echantillons car sum=0
who_no_expression <- which(total_expression == 0)
# Control
expressed_raw_counts <- raw_counts[-who_no_expression,]
expressed_total_expression <- rowSums(expressed_raw_counts)
expressed_no_expression <- sum(expressed_total_expression == 0)
nb_expressed_genes <- dim(expressed_raw_counts)[1]
# Tous les genes ne s'exprimant pas ont ete enleves
total_reads <- (colSums(raw_counts)/1000000)
expressed_total_reads <- (colSums(expressed_raw_counts)/1000000)
identical(total_reads, expressed_total_reads)
# TRUE: enlever les genes ne s'exprimant pas ne change rien au calcul
expressed_counts_norm <- data.frame(t(t(expressed_raw_counts) / expressed_total_reads))
# write.csv(expressed_counts_norm, file="expressed_counts_norm.csv")
########################
map_time <- read.csv("sample_sheet_ENCSR897XFT.csv", sep=",", header=TRUE)[,-3]
hours <- c(0)
for (i in 1:nb_sample) {
exp <- colnames(raw_counts)[i]
ind <- which(exp == map_time$file_accession )
hours[i] <- map_time$time_point[ind]
}
colnames(expressed_counts_norm) <- hours
########################
# OBJ: moyenne les colonnes
# mean_expressed_counts_norm <- c(rep(0, nb_expressed_genes))
# lhours <- c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)
# for (h in lhours) {
#   ind <- which(hours == h)
#   data_perhour <- expressed_counts_norm[, ind]
#   mean_data_perhour <- apply(data_perhour, 1, mean)
#   mean_expressed_counts_norm <- data.frame(mean_expressed_counts_norm, mean_data_perhour)
# }
#
# mean_expressed_counts_norm <- mean_expressed_counts_norm[,-1]
# colnames(mean_expressed_counts_norm) <- lhours
########################
########################
# Ajoute une colonne avec le HGNC Symbol
map_ens_hgnc <- read.csv("map_ensembl_hgnc.csv", header=TRUE)
map_ens_hgnc$ensembl_gene_id <- as.character(map_ens_hgnc$ensembl_gene_id)
map_ens_hgnc$hgnc_symbol <- as.character(map_ens_hgnc$hgnc_symbol)
#
# hgnc <- c(0)
# for (i in 1:nb_expressed_genes) {
#   ens <- rownames(expressed_counts_norm)[i]
#   ind <- which(map_ens_hgnc$ensembl_gene_id == ens)
#   if (length(ind) == 0) {
#     hgnc[i] <- ""
#   } else {
#     hgnc[i] <- map_ens_hgnc$hgnc_symbol[ind]
#   }
# }
#
# expressed_counts_norm <- data.frame(hgnc, expressed_counts_norm)
# colnames(expressed_counts_norm) <- c("HGNC_Symbol", hours)
# "ENSG00000231709" not in the database
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(scales)
#
# # Data
# df <- data.frame(hours, t(expressed_counts_norm)) %>% select(hours, as.factor(rownames(expressed_counts_norm))) %>% gather(key = "genes", value = "counts", -hours)
#
# # Calculation of mean
# df_mean <- aggregate(df$counts, by=list(df$hours, df$genes), mean)
# colnames(df_mean) <- c("hours", "genes", "mean")
#
# # Make the plot
# ggplot(df, aes(x = hours, y = counts)) +
#   geom_point(aes(color = genes), size = 1) +
#   geom_line(data=df_mean, aes(x=hours, y=mean, group=genes, color=genes)) +
#   theme(legend.position='none') +
#   scale_x_continuous(name="Hours", labels=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12), breaks=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)) +
#   scale_y_continuous(name="RPM", labels=comma)
##############################
# prealable:
# creer la matrice de counts normalise --> expressed_counts_norm
# importer le mapping file: ensembl <-> hgnc --> map_ens_hgnc
# jun_genes <- c("WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
# test: draw_a549_dex_time_points(jun_genes, expressed_counts_norm, map_ens_hgnc)
draw_a549_dex_time_points <- function(genes_list, counts_mat, mapping) {
inds <- c(0)
for (gene in genes_list) {
ind_hgnc <- which(gene == mapping$hgnc_symbol)
id_ensembl <- mapping$ensembl_gene_id[ind_hgnc]
inds <- c(inds, which(id_ensembl == rownames(counts_mat)))
}
inds <- inds[-1]
mat_for_graph <- counts_mat[inds,]
rownames(mat_for_graph) <- genes_list
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
# Data
hours <- as.numeric(colnames(mat_for_graph))
# select(hours, as.factor(rownames(mat_for_graph))) %>%
df <- data.frame(hours, t(mat_for_graph)) %>% gather(key = "genes", value = "counts", -hours)
# Calculation of mean
df_mean <- aggregate(log2(df$counts + 1), by=list(df$hours, df$genes), mean)
colnames(df_mean) <- c("hours", "genes", "mean")
# Make the plot
ggplot(df, aes(x = hours, y = log2(counts + 1))) +
geom_point(aes(color = genes), size = 1) +
geom_line(data=df_mean, aes(x=hours, y=mean, group=genes, color=genes)) +
scale_x_continuous(name="Hours", labels=c(0, 0.5, 1,s 2, 3, 4, 5, 6, 7, 8, 10, 12), breaks=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)) +
scale_y_continuous(name="log2(RPM)", labels=comma)
}
### TO RUN
test_genes <- c("HEXIM1", "NELFA", "NCOR1", "NCOR2", "TBL1XR1", "NR3C1", "NIPBL", "WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
draw_a549_dex_time_points(test_genes, expressed_counts_norm, map_ens_hgnc)
# setwd("/home/chris/Bureau/sb_cofactor_hr/A549/scripts/draw_graph_from_time_series/")
raw_counts <- read.csv("raw_counts.csv", sep=",", header=TRUE, row.names=1)
nb_genes <- dim(raw_counts)[1]
nb_sample <- dim(raw_counts)[2]
# 60483 genes
# 46 samples (correspondant a differents temps)
total_expression <- rowSums(raw_counts)
no_expression <- sum(total_expression == 0)
# 22569 genes ne s'exprimant pas pendant les 12 heures dans aucun des echantillons car sum=0
who_no_expression <- which(total_expression == 0)
# Control
expressed_raw_counts <- raw_counts[-who_no_expression,]
expressed_total_expression <- rowSums(expressed_raw_counts)
expressed_no_expression <- sum(expressed_total_expression == 0)
nb_expressed_genes <- dim(expressed_raw_counts)[1]
# Tous les genes ne s'exprimant pas ont ete enleves
total_reads <- (colSums(raw_counts)/1000000)
expressed_total_reads <- (colSums(expressed_raw_counts)/1000000)
identical(total_reads, expressed_total_reads)
# TRUE: enlever les genes ne s'exprimant pas ne change rien au calcul
expressed_counts_norm <- data.frame(t(t(expressed_raw_counts) / expressed_total_reads))
# write.csv(expressed_counts_norm, file="expressed_counts_norm.csv")
########################
map_time <- read.csv("sample_sheet_ENCSR897XFT.csv", sep=",", header=TRUE)[,-3]
hours <- c(0)
for (i in 1:nb_sample) {
exp <- colnames(raw_counts)[i]
ind <- which(exp == map_time$file_accession )
hours[i] <- map_time$time_point[ind]
}
colnames(expressed_counts_norm) <- hours
########################
# OBJ: moyenne les colonnes
# mean_expressed_counts_norm <- c(rep(0, nb_expressed_genes))
# lhours <- c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)
# for (h in lhours) {
#   ind <- which(hours == h)
#   data_perhour <- expressed_counts_norm[, ind]
#   mean_data_perhour <- apply(data_perhour, 1, mean)
#   mean_expressed_counts_norm <- data.frame(mean_expressed_counts_norm, mean_data_perhour)
# }
#
# mean_expressed_counts_norm <- mean_expressed_counts_norm[,-1]
# colnames(mean_expressed_counts_norm) <- lhours
########################
########################
# Ajoute une colonne avec le HGNC Symbol
map_ens_hgnc <- read.csv("map_ensembl_hgnc.csv", header=TRUE)
map_ens_hgnc$ensembl_gene_id <- as.character(map_ens_hgnc$ensembl_gene_id)
map_ens_hgnc$hgnc_symbol <- as.character(map_ens_hgnc$hgnc_symbol)
#
# hgnc <- c(0)
# for (i in 1:nb_expressed_genes) {
#   ens <- rownames(expressed_counts_norm)[i]
#   ind <- which(map_ens_hgnc$ensembl_gene_id == ens)
#   if (length(ind) == 0) {
#     hgnc[i] <- ""
#   } else {
#     hgnc[i] <- map_ens_hgnc$hgnc_symbol[ind]
#   }
# }
#
# expressed_counts_norm <- data.frame(hgnc, expressed_counts_norm)
# colnames(expressed_counts_norm) <- c("HGNC_Symbol", hours)
# "ENSG00000231709" not in the database
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(scales)
#
# # Data
# df <- data.frame(hours, t(expressed_counts_norm)) %>% select(hours, as.factor(rownames(expressed_counts_norm))) %>% gather(key = "genes", value = "counts", -hours)
#
# # Calculation of mean
# df_mean <- aggregate(df$counts, by=list(df$hours, df$genes), mean)
# colnames(df_mean) <- c("hours", "genes", "mean")
#
# # Make the plot
# ggplot(df, aes(x = hours, y = counts)) +
#   geom_point(aes(color = genes), size = 1) +
#   geom_line(data=df_mean, aes(x=hours, y=mean, group=genes, color=genes)) +
#   theme(legend.position='none') +
#   scale_x_continuous(name="Hours", labels=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12), breaks=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)) +
#   scale_y_continuous(name="RPM", labels=comma)
##############################
# prealable:
# creer la matrice de counts normalise --> expressed_counts_norm
# importer le mapping file: ensembl <-> hgnc --> map_ens_hgnc
# jun_genes <- c("WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
# test: draw_a549_dex_time_points(jun_genes, expressed_counts_norm, map_ens_hgnc)
draw_a549_dex_time_points <- function(genes_list, counts_mat, mapping) {
inds <- c(0)
for (gene in genes_list) {
ind_hgnc <- which(gene == mapping$hgnc_symbol)
id_ensembl <- mapping$ensembl_gene_id[ind_hgnc]
inds <- c(inds, which(id_ensembl == rownames(counts_mat)))
}
inds <- inds[-1]
mat_for_graph <- counts_mat[inds,]
rownames(mat_for_graph) <- genes_list
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
# Data
hours <- as.numeric(colnames(mat_for_graph))
# select(hours, as.factor(rownames(mat_for_graph))) %>%
df <- data.frame(hours, t(mat_for_graph)) %>% gather(key = "genes", value = "counts", -hours)
# Calculation of mean
df_mean <- aggregate(log2(df$counts + 1), by=list(df$hours, df$genes), mean)
colnames(df_mean) <- c("hours", "genes", "mean")
# Make the plot
ggplot(df, aes(x = hours, y = log2(counts + 1))) +
geom_point(aes(color = genes), size = 1) +
geom_line(data=df_mean, aes(x=hours, y=mean, group=genes, color=genes)) +
scale_x_continuous(name="Hours", labels=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12), breaks=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)) +
scale_y_continuous(name="log2(RPM)", labels=comma)
}
### TO RUN
test_genes <- c("HEXIM1", "NELFA", "NCOR1", "NCOR2", "TBL1XR1", "NR3C1", "NIPBL", "WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
draw_a549_dex_time_points(test_genes, expressed_counts_norm, map_ens_hgnc)
nb_genes <- nrow(raw_counts)
raw_counts <- read.csv("raw_counts.csv", sep=",", header=TRUE, row.names=1)
nb_genes <- nrow(raw_counts)
nb_sample <- ncol(raw_counts)
total_expression <- rowSums(raw_counts)
no_expression <- sum(total_expression == 0)
who_no_expression <- which(total_expression == 0)
# Control
expressed_raw_counts <- raw_counts[-who_no_expression,]
# Control
expressed_raw_counts <- raw_counts[-(total_expression == 0),]
# Control
expressed_raw_counts <- raw_counts[(total_expression == 0),]
# Control
expressed_raw_counts <- raw_counts[-(total_expression == 0),]
# Control
expressed_raw_counts <- raw_counts[-!(total_expression == 0),]
# Control
expressed_raw_counts <- raw_counts[!(total_expression == 0),]
# Control
expressed_raw_counts <- raw_counts[-who_no_expression,]
expressed_total_expression <- rowSums(expressed_raw_counts)
expressed_no_expression <- sum(expressed_total_expression == 0)
nb_expressed_genes <- dim(expressed_raw_counts)[1]
total_reads <- (colSums(raw_counts)/1000000)
expressed_total_reads <- (colSums(expressed_raw_counts)/1000000)
identical(total_reads, expressed_total_reads)
expressed_counts_norm <- data.frame(t(t(expressed_raw_counts) / expressed_total_reads))
map_time <- read.csv("sample_sheet_ENCSR897XFT.csv", sep=",", header=TRUE)[,-3]
hours <- c(0)
for (i in 1:nb_sample) {
exp <- colnames(raw_counts)[i]
ind <- which(exp == map_time$file_accession )
hours[i] <- map_time$time_point[ind]
}
colnames(expressed_counts_norm) <- hours
# setwd("/home/chris/Bureau/sb_cofactor_hr/A549/scripts/draw_graph_from_time_series/")
raw_counts <- read.csv("raw_counts.csv", sep=",", header=TRUE, row.names=1)
nb_genes <- nrow(raw_counts)
nb_sample <- ncol(raw_counts)
# 60483 genes
# 46 samples (corresponding to several time points)
total_expression <- rowSums(raw_counts)
no_expression <- sum(total_expression == 0)
# 22569 genes do not expressed during the 12 hours (because sum=0)
who_no_expression <- which(total_expression == 0)
# Control
expressed_raw_counts <- raw_counts[-who_no_expression,]
expressed_total_expression <- rowSums(expressed_raw_counts)
expressed_no_expression <- sum(expressed_total_expression == 0)
nb_expressed_genes <- dim(expressed_raw_counts)[1]
# Genes that do not expressed have been removed
total_reads <- (colSums(raw_counts)/1000000)
expressed_total_reads <- (colSums(expressed_raw_counts)/1000000)
identical(total_reads, expressed_total_reads)
expressed_counts_norm <- data.frame(t(t(expressed_raw_counts) / expressed_total_reads))
# write.csv(expressed_counts_norm, file="expressed_counts_norm.csv")
########################
map_time <- read.csv("sample_sheet_ENCSR897XFT.csv", sep=",", header=TRUE)[,-3]
hours <- c(0)
for (i in 1:nb_sample) {
exp <- colnames(raw_counts)[i]
ind <- which(exp == map_time$file_accession )
hours[i] <- map_time$time_point[ind]
}
colnames(expressed_counts_norm) <- hours
########################
map_ens_hgnc <- read.csv("map_ensembl_hgnc.csv", header=TRUE)
map_ens_hgnc$ensembl_gene_id <- as.character(map_ens_hgnc$ensembl_gene_id)
map_ens_hgnc$hgnc_symbol <- as.character(map_ens_hgnc$hgnc_symbol)
# "ENSG00000231709" not in the database
##############################
# prealable:
# creer la matrice de counts normalise --> expressed_counts_norm
# importer le mapping file: ensembl <-> hgnc --> map_ens_hgnc
# jun_genes <- c("WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
# test: draw_a549_dex_time_points(jun_genes, expressed_counts_norm, map_ens_hgnc)
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
draw_a549_dex_time_points <- function(genes_list, counts_mat, mapping) {
inds <- c(numeric)
for (gene in genes_list) {
ind_hgnc <- which(gene == mapping$hgnc_symbol)
id_ensembl <- mapping$ensembl_gene_id[ind_hgnc]
inds <- c(inds, which(id_ensembl == rownames(counts_mat)))
}
mat_for_graph <- counts_mat[inds,]
rownames(mat_for_graph) <- genes_list
# Data
hours <- as.numeric(colnames(mat_for_graph))
# select(hours, as.factor(rownames(mat_for_graph))) %>%
df <- data.frame(hours, t(mat_for_graph)) %>% gather(key = "genes", value = "counts", -hours)
# Calculation of mean
df_mean <- aggregate(log2(df$counts + 1), by=list(df$hours, df$genes), mean)
colnames(df_mean) <- c("hours", "genes", "mean")
# Make the plot
ggplot(df, aes(x = hours, y = log2(counts + 1))) +
geom_point(aes(color = genes), size = 1) +
geom_line(data=df_mean, aes(x=hours, y=mean, group=genes, color=genes)) +
scale_x_continuous(name="Hours", labels=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12), breaks=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)) +
scale_y_continuous(name="log2(RPM)", labels=comma)
}
### TO RUN
test_genes <- c("HEXIM1", "NELFA", "NCOR1", "NCOR2", "TBL1XR1", "NR3C1", "NIPBL", "WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
draw_a549_dex_time_points(test_genes, expressed_counts_norm, map_ens_hgnc)
# setwd("/home/chris/Bureau/sb_cofactor_hr/A549/scripts/draw_graph_from_time_series/")
raw_counts <- read.csv("raw_counts.csv", sep=",", header=TRUE, row.names=1)
nb_genes <- nrow(raw_counts)
nb_sample <- ncol(raw_counts)
# 60483 genes
# 46 samples (corresponding to several time points)
total_expression <- rowSums(raw_counts)
no_expression <- sum(total_expression == 0)
# 22569 genes do not expressed during the 12 hours (because sum=0)
who_no_expression <- which(total_expression == 0)
# Control
expressed_raw_counts <- raw_counts[-who_no_expression,]
expressed_total_expression <- rowSums(expressed_raw_counts)
expressed_no_expression <- sum(expressed_total_expression == 0)
nb_expressed_genes <- dim(expressed_raw_counts)[1]
# Genes that do not expressed have been removed
total_reads <- (colSums(raw_counts)/1000000)
expressed_total_reads <- (colSums(expressed_raw_counts)/1000000)
identical(total_reads, expressed_total_reads)
expressed_counts_norm <- data.frame(t(t(expressed_raw_counts) / expressed_total_reads))
# write.csv(expressed_counts_norm, file="expressed_counts_norm.csv")
########################
map_time <- read.csv("sample_sheet_ENCSR897XFT.csv", sep=",", header=TRUE)[,-3]
hours <- c(0)
for (i in 1:nb_sample) {
exp <- colnames(raw_counts)[i]
ind <- which(exp == map_time$file_accession )
hours[i] <- map_time$time_point[ind]
}
colnames(expressed_counts_norm) <- hours
########################
map_ens_hgnc <- read.csv("map_ensembl_hgnc.csv", header=TRUE)
map_ens_hgnc$ensembl_gene_id <- as.character(map_ens_hgnc$ensembl_gene_id)
map_ens_hgnc$hgnc_symbol <- as.character(map_ens_hgnc$hgnc_symbol)
# "ENSG00000231709" not in the database
##############################
# prealable:
# creer la matrice de counts normalise --> expressed_counts_norm
# importer le mapping file: ensembl <-> hgnc --> map_ens_hgnc
# jun_genes <- c("WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
# test: draw_a549_dex_time_points(jun_genes, expressed_counts_norm, map_ens_hgnc)
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
draw_a549_dex_time_points <- function(genes_list, counts_mat, mapping) {
inds <- c(NULL)
for (gene in genes_list) {
ind_hgnc <- which(gene == mapping$hgnc_symbol)
id_ensembl <- mapping$ensembl_gene_id[ind_hgnc]
inds <- c(inds, which(id_ensembl == rownames(counts_mat)))
}
mat_for_graph <- counts_mat[inds,]
rownames(mat_for_graph) <- genes_list
# Data
hours <- as.numeric(colnames(mat_for_graph))
# select(hours, as.factor(rownames(mat_for_graph))) %>%
df <- data.frame(hours, t(mat_for_graph)) %>% gather(key = "genes", value = "counts", -hours)
# Calculation of mean
df_mean <- aggregate(log2(df$counts + 1), by=list(df$hours, df$genes), mean)
colnames(df_mean) <- c("hours", "genes", "mean")
# Make the plot
ggplot(df, aes(x = hours, y = log2(counts + 1))) +
geom_point(aes(color = genes), size = 1) +
geom_line(data=df_mean, aes(x=hours, y=mean, group=genes, color=genes)) +
scale_x_continuous(name="Hours", labels=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12), breaks=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)) +
scale_y_continuous(name="log2(RPM)", labels=comma)
}
### TO RUN
test_genes <- c("HEXIM1", "NELFA", "NCOR1", "NCOR2", "TBL1XR1", "NR3C1", "NIPBL", "WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
draw_a549_dex_time_points(test_genes, expressed_counts_norm, map_ens_hgnc)
View(expressed_counts_norm)
# setwd("/home/chris/Bureau/sb_cofactor_hr/A549/scripts/draw_graph_from_time_series/")
raw_counts <- read.csv("raw_counts.csv", sep=",", header=TRUE, row.names=1)
nb_genes <- nrow(raw_counts)
nb_sample <- ncol(raw_counts)
# 60483 genes
# 46 samples (corresponding to several time points)
total_expression <- rowSums(raw_counts)
no_expression <- sum(total_expression == 0)
# 22569 genes do not expressed during the 12 hours (because sum=0)
who_no_expression <- which(total_expression == 0)
# Control
expressed_raw_counts <- raw_counts[-who_no_expression,]
expressed_total_expression <- rowSums(expressed_raw_counts)
expressed_no_expression <- sum(expressed_total_expression == 0)
nb_expressed_genes <- dim(expressed_raw_counts)[1]
# Genes that do not expressed have been removed
total_reads <- (colSums(raw_counts)/1000000)
expressed_total_reads <- (colSums(expressed_raw_counts)/1000000)
identical(total_reads, expressed_total_reads)
expressed_counts_norm <- data.frame(t(t(expressed_raw_counts) / expressed_total_reads))
# write.csv(expressed_counts_norm, file="expressed_counts_norm.csv")
########################
map_time <- read.csv("sample_sheet_ENCSR897XFT.csv", sep=",", header=TRUE)[,-3]
hours <- c(0)
for (i in 1:nb_sample) {
exp <- colnames(raw_counts)[i]
ind <- which(exp == map_time$file_accession )
hours[i] <- map_time$time_point[ind]
}
colnames(expressed_counts_norm) <- hours
########################
map_ens_hgnc <- read.csv("map_ensembl_hgnc.csv", header=TRUE)
map_ens_hgnc$ensembl_gene_id <- as.character(map_ens_hgnc$ensembl_gene_id)
map_ens_hgnc$hgnc_symbol <- as.character(map_ens_hgnc$hgnc_symbol)
# "ENSG00000231709" not in the database
##############################
library(tidyr)
library(dplyr)
library(ggplot2)
library(scales)
### draw_a549_dex_time_points function
# genes_list: vector of genes
# counts_mat: counts matrix (row: genes, col: time)
# mapping: correspondance between ensembl_id and symbol_hgnc_id
draw_a549_dex_time_points <- function(genes_list, counts_mat, mapping) {
inds <- c(NULL)
for (gene in genes_list) {
ind_hgnc <- which(gene == mapping$hgnc_symbol)
id_ensembl <- mapping$ensembl_gene_id[ind_hgnc]
inds <- c(inds, which(id_ensembl == rownames(counts_mat)))
}
mat_for_graph <- counts_mat[inds,]
rownames(mat_for_graph) <- genes_list
# Data
hours <- as.numeric(colnames(mat_for_graph))
# select(hours, as.factor(rownames(mat_for_graph))) %>%
df <- data.frame(hours, t(mat_for_graph)) %>% gather(key = "genes", value = "counts", -hours)
# Calculation of mean
df_mean <- aggregate(log2(df$counts + 1), by=list(df$hours, df$genes), mean)
colnames(df_mean) <- c("hours", "genes", "mean")
# Make the plot
ggplot(df, aes(x = hours, y = log2(counts + 1))) +
geom_point(aes(color = genes), size = 1) +
geom_line(data=df_mean, aes(x=hours, y=mean, group=genes, color=genes)) +
scale_x_continuous(name="Hours", labels=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12), breaks=c(0, 0.5, 1, 2, 3, 4, 5, 6, 7, 8, 10, 12)) +
scale_y_continuous(name="log2(RPM)", labels=comma)
}
### TO RUN
test_genes <- c("HEXIM1", "NELFA", "NCOR1", "NCOR2", "TBL1XR1", "NR3C1", "NIPBL", "WNT7B", "FZD8", "HACD3", "FZD5", "DVL2")
draw_a549_dex_time_points(test_genes, expressed_counts_norm, map_ens_hgnc)
